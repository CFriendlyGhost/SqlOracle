CREATE TABLE Bandy 
    (nr_bandy NUMBER(2) CONSTRAINT ban_pk PRIMARY KEY,
    nazwa VARCHAR2(20) CONSTRAINT ban_nazw_nn NOT NULL,
    teren VARCHAR2(15) CONSTRAINT ban_ter_uniq UNIQUE,
    szef_bandy VARCHAR2(15) CONSTRAINT ban_szf_uniq UNIQUE
    );
    
CREATE TABLE Funkcje
    (funkcja VARCHAR2(10) CONSTRAINT fun_pk PRIMARY KEY,
    min_myszy NUMBER(3) CONSTRAINT fun_min_ch CHECK (min_myszy > 5),
    max_myszy NUMBER(3) CONSTRAINT fun_max_ch CHECK (max_myszy < 200),
    CONSTRAINT fun_max_min_ch CHECK (max_myszy >= min_myszy)
    );

CREATE TABLE Wrogowie
    (imie_wroga VARCHAR2(15) CONSTRAINT wrog_pk PRIMARY KEY,     
    stopien_wrogosci NUMBER(2) CONSTRAINT wrog_sw CHECK (stopien_wrogosci BETWEEN 1 AND 10),
    gatunek VARCHAR2(15),
    lapowka VARCHAR2(20)
    );

CREATE TABLE Kocury
    (imie VARCHAR2(15) CONSTRAINT koc_im_nn NOT NULL,
    plec VARCHAR2(1) CONSTRAINT koc_plec_ch CHECK(plec IN ('D','M')),
    pseudo VARCHAR2(15) CONSTRAINT koc_ps_pk PRIMARY KEY,
    funkcja VARCHAR2(10) CONSTRAINT koc_fun_fk REFERENCES Funkcje(funkcja),
    szef VARCHAR2(15) CONSTRAINT koc_ps_fk REFERENCES Kocury(pseudo),
    w_stadku_od DATE DEFAULT SYSDATE,
    przydzial_myszy NUMBER(3),
    myszy_extra NUMBER(3),            
    nr_bandy NUMBER(2) CONSTRAINT koc_ban_fk REFERENCES Bandy(nr_bandy)
    );
    
ALTER TABLE Bandy ADD CONSTRAINT ban_szf_fk FOREIGN KEY (szef_bandy) REFERENCES Kocury(pseudo);
    
CREATE TABLE Wrogowie_kocurow
    (pseudo VARCHAR2(15) CONSTRAINT wr_ps_fk REFERENCES Kocury(pseudo),
    imie_wroga VARCHAR2(15) CONSTRAINT wr_iw_fk REFERENCES Wrogowie(imie_wroga),
    data_incydentu DATE CONSTRAINT wr_di_nn NOT NULL,
    opis_incydentu VARCHAR2(50),
    CONSTRAINT wr_pk PRIMARY KEY(pseudo, imie_wroga)
    );
    
ALTER TABLE Kocury DISABLE CONSTRAINT koc_fun_fk;
ALTER TABLE Kocury DISABLE CONSTRAINT koc_ps_fk;
ALTER TABLE Kocury DISABLE CONSTRAINT koc_ban_fk;
ALTER TABLE Wrogowie_kocurow DISABLE CONSTRAINT wr_ps_fk;
ALTER TABLE Wrogowie_kocurow DISABLE CONSTRAINT wr_iw_fk;
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

INSERT ALL
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('JACEK','M','PLACEK','LOWCZY','LYSY','2008-12-01',67,NULL,2)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('BARI','M','RURA','LAPACZ','LYSY','2009-09-01',56,NULL,2)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('MICKA','D','LOLA','MILUSIA','TYGRYS','2009-10-14',25,47,1)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('LUCEK','M','ZERO','KOT','KURKA','2010-03-01',43,NULL,3)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('SONIA','D','PUSZYSTA','MILUSIA','ZOMBI','2010-11-18',20,35,3)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('LATKA','D','UCHO','KOT','RAFA','2011-01-01',40,NULL,4)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('DUDEK','M','MALY','KOT','RAFA','2011-05-15',40,NULL,4)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('MRUCZEK','M','TYGRYS','SZEFUNIO',NULL,'2002-01-01',103,33,1)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('CHYTRY','M','BOLEK','DZIELCZY','TYGRYS','2002-05-05',50,NULL,1)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('KOREK','M','ZOMBI','BANDZIOR','TYGRYS','2004-03-16',75,13,3)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('BOLEK','M','LYSY','BANDZIOR','TYGRYS','2006-08-15',72,21,2)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('ZUZIA','D','SZYBKA','LOWCZY','LYSY','2006-07-21',65,NULL,2)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('RUDA','D','MALA','MILUSIA','TYGRYS','2006-09-17',22,42,1)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('PUCEK','M','RAFA','LOWCZY','TYGRYS','2006-10-15',65,NULL,4)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('PUNIA','D','KURKA','LOWCZY','ZOMBI','2008-01-01',61,NULL,3)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('BELA','D','LASKA','MILUSIA','LYSY','2008-02-01',24,28,2)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('KSAWERY','M','MAN','LAPACZ','RAFA','2008-07-12',51,NULL,4)
INTO Kocury(imie,plec,pseudo,funkcja,szef,w_stadku_od,przydzial_myszy,
myszy_extra,nr_bandy) VALUES
('MELA','D','DAMA','LAPACZ','RAFA','2008-11-01',51,NULL,4)
SELECT * FROM dual;

INSERT ALL
INTO Bandy(nr_bandy,nazwa,teren,szef_bandy) VALUES
(1,'SZEFOSTWO','CALOSC','TYGRYS')
INTO Bandy(nr_bandy,nazwa,teren,szef_bandy) VALUES
(2,'CZARNI RYCERZE','POLE','LYSY')
INTO Bandy(nr_bandy,nazwa,teren,szef_bandy) VALUES
(3,'BIALI LOWCY','SAD','ZOMBI')
INTO Bandy(nr_bandy,nazwa,teren,szef_bandy) VALUES
(4,'LACIACI MYSLIWI','GORKA','RAFA')
INTO Bandy(nr_bandy,nazwa,teren,szef_bandy) VALUES
(5,'ROCKERSI','ZAGRODA',NULL)
SELECT * FROM dual;

INSERT ALL
INTO Funkcje(funkcja,min_myszy,max_myszy) VALUES
('SZEFUNIO',90,110)
INTO Funkcje(funkcja,min_myszy,max_myszy) VALUES
('BANDZIOR',70,90)
INTO Funkcje(funkcja,min_myszy,max_myszy) VALUES
('LOWCZY',60,70)
INTO Funkcje(funkcja,min_myszy,max_myszy) VALUES
('LAPACZ',50,60)
INTO Funkcje(funkcja,min_myszy,max_myszy) VALUES
('KOT',40,50)
INTO Funkcje(funkcja,min_myszy,max_myszy) VALUES
('MILUSIA',20,30)
INTO Funkcje(funkcja,min_myszy,max_myszy) VALUES
('DZIELCZY',45,55)
INTO Funkcje(funkcja,min_myszy,max_myszy) VALUES
('HONOROWA',6,25)
SELECT * FROM dual;

INSERT ALL
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('KAZIO',10,'CZLOWIEK','FLASZKA')
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('GLUPIA ZOSKA',1,'CZLOWIEK','KORALIK')
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('SWAWOLNY DYZIO',7,'CZLOWIEK','GUMA DO ZUCIA')
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('BUREK',4,'PIES','KOSC')
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('DZIKI BILL',10,'PIES',NULL)
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('REKSIO',2,'PIES','KOSC')
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('BETHOVEN',1,'PIES','PEDIGRIPALL')
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('CHYTRUSEK',5,'LIS','KURCZAK')
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('SMUKLA',1,'SOSNA',NULL)
INTO Wrogowie(imie_wroga,stopien_wrogosci,gatunek,lapowka) VALUES
('BAZYLI',3,'KOGUT','KURA DO STADA')
SELECT * FROM dual;


INSERT ALL
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('TYGRYS','KAZIO','2004-10-13','USILOWAL NABIC NA WIDLY')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('ZOMBI','SWAWOLNY DYZIO','2005-03-07','WYBIL OKO Z PROCY')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('BOLEK','KAZIO','2005-03-29','POSZCZUL BURKIEM')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('SZYBKA','GLUPIA ZOSKA','2006-09-12','UZYLA KOTA JAKO SCIERKI')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('MALA','CHYTRUSEK','2007-03-07','ZALECAL SIE')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('TYGRYS','DZIKI BILL','2007-06-12','USILOWAL POZBAWIC ZYCIA')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('BOLEK','DZIKI BILL','2007-11-10','ODGRYZL UCHO')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('LASKA','DZIKI BILL','2008-12-12','POGRYZL ZE LEDWO SIE WYLIZALA')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('LASKA','KAZIO','2009-01-07','ZLAPAL ZA OGON I ZROBIL WIATRAK')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('DAMA','KAZIO','2009-02-07','CHCIAL OBEDRZEC ZE SKORY')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('MAN','REKSIO','2009-04-14','WYJATKOWO NIEGRZECZNIE OBSZCZEKAL')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('LYSY','BETHOVEN','2009-05-11','NIE PODZIELIL SIE SWOJA KASZA')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('RURA','DZIKI BILL','2009-09-03','ODGRYZL OGON')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('PLACEK','BAZYLI','2010-07-12','DZIOBIAC UNIEMOZLIWIL PODEBRANIE KURCZAKA')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('PUSZYSTA','SMUKLA','2010-11-19','OBRZUCILA SZYSZKAMI')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('KURKA','BUREK','2010-12-14','POGONIL')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('MALY','CHYTRUSEK','2011-07-13','PODEBRAL PODEBRANE JAJKA')
INTO Wrogowie_kocurow(pseudo,imie_wroga,data_incydentu,opis_incydentu) VALUES
('UCHO','SWAWOLNY DYZIO','2011-07-14','OBRZUCIL KAMIENIAMI')
SELECT * FROM dual;

ALTER TABLE Kocury ENABLE CONSTRAINT koc_fun_fk;
ALTER TABLE Kocury ENABLE CONSTRAINT koc_ps_fk;
ALTER TABLE Kocury ENABLE CONSTRAINT koc_ban_fk;
ALTER TABLE Wrogowie_kocurow ENABLE CONSTRAINT wr_ps_fk;
ALTER TABLE Wrogowie_kocurow ENABLE CONSTRAINT wr_iw_fk;

--Zad 1
SELECT imie_wroga AS "WROG", opis_incydentu AS "PRZEWINA"
FROM wrogowie_kocurow
WHERE EXTRACT(YEAR FROM data_incydentu) = 2009;

--Zad 2
SELECT imie, funkcja, w_stadku_od AS "Z NAMI OD"
FROM kocury
WHERE plec = 'D'
AND w_stadku_od BETWEEN '2005-09-01' AND '2007-07-31';

--Zad 3
SELECT imie_wroga AS "WROG", gatunek, stopien_wrogosci AS "STOPIEN WROGOSCI"
FROM wrogowie
WHERE lapowka IS NULL
ORDER BY stopien_wrogosci;

--Zad 4
SELECT imie || ' zwany ' || pseudo || ' (fun. ' || funkcja || 
') lowi myszki w bandzie ' || nr_bandy || ' od ' || w_stadku_od 
AS "WSZYSTKO O KOCURACH"
FROM kocury
ORDER BY w_stadku_od DESC, pseudo;

--Zad 5
SELECT pseudo, 
REGEXP_REPLACE(REGEXP_REPLACE(pseudo, 'A', '#', 1, 1), 'L', '%', 1, 1) 
AS "Po wymianie A na # oraz L na %"
FROM kocury
WHERE INSTR(pseudo, 'A') > 0 AND INSTR(pseudo, 'L') > 0;

--Zad 6
SELECT 
    imie, 
    w_stadku_od AS "W stadku", 
    ROUND(przydzial_myszy / 1.1, 0) AS "zjadal", 
    ADD_MONTHS(w_stadku_od, 6) AS "Podwyzka",
    przydzial_myszy AS "zjada"
FROM kocury
WHERE EXTRACT(MONTH FROM w_stadku_od) BETWEEN 3 AND 9
AND MONTHS_BETWEEN('2023-06-29', w_stadku_od) > 168;

--Zad 7
SELECT 
    imie, 
    przydzial_myszy * 3 AS "MYSZY KWARTALNIE", 
    nvl(myszy_extra, 0) * 3 AS "KWARTALNE DODATKI"
FROM Kocury
WHERE przydzial_myszy > 2 * nvl(myszy_extra, 0)
AND przydzial_myszy >= 55
ORDER BY "MYSZY KWARTALNIE" DESC;
    
--Zad 8
SELECT imie, 
    CASE WHEN (przydzial_myszy + nvl(myszy_extra, 0)) * 12 < 660 THEN 'PONIZEJ 660'
         WHEN (przydzial_myszy + nvl(myszy_extra, 0)) * 12 = 660 THEN 'LIMIT'
         ELSE TO_CHAR((przydzial_myszy + nvl(myszy_extra, 0)) * 12)
    END AS "Zjada rocznie"
FROM Kocury;

--Zad 9
SELECT pseudo, w_stadku_od AS "W stadku",
	CASE WHEN EXTRACT(DAY FROM w_stadku_od) <= 15 
    AND NEXT_DAY(LAST_DAY('2023-10-25') - 7, 3) >= '2023-10-25'
		THEN NEXT_DAY(LAST_DAY('2023-10-25') - 7, 3)
	WHEN EXTRACT(DAY FROM w_stadku_od) > 15 
		THEN NEXT_DAY(LAST_DAY(ADD_MONTHS('2023-10-25',1)) - 7, 3)
    ELSE NEXT_DAY(LAST_DAY(ADD_MONTHS('2023-10-25',1)) - 7, 3)
		END AS "WYPLATA"
FROM Kocury
ORDER BY w_stadku_od;

--Zad 10
SELECT pseudo || ' - ' ||
     CASE 
        WHEN COUNT(pseudo) = 1 THEN 'Unikalny'
        ELSE 'Nieunikalny'
    END AS "Unikalnosc atr. PSEUDO"
FROM kocury
GROUP BY pseudo;

SELECT szef || ' - ' ||
     CASE 
        WHEN COUNT(pseudo) = 1 THEN 'Unikalny'
        ELSE 'Nieunikalny'
    END AS "Unikalnosc atr. SZEF"
FROM kocury
GROUP BY szef
HAVING szef IS NOT NULL;

--Zadanie 11
SELECT K.pseudo AS "Pseudonim", COUNT(W.imie_wroga) AS "Liczba wrogow"
FROM Kocury K
JOIN wrogowie_kocurow W
ON K.pseudo = W.pseudo
GROUP BY K.pseudo
HAVING COUNT(W.imie_wroga) >= 2;

--Zadanie 12
SELECT 
    'Liczba kotow= ' || COUNT(K.pseudo) || ' Lowi jako '|| K.funkcja
    || ' i zjada max. ' || MAX(K.przydzial_myszy + NVL(K.myszy_extra, 0))
    || ' myszy miesiecznie'
FROM Kocury K
JOIN Funkcje F ON K.funkcja = F.funkcja
WHERE 
    k.plec != 'M'
    AND k.pseudo != 'SZEFUNIO'
GROUP BY
    K.funkcja
HAVING 
    AVG(K.przydzial_myszy + NVL(K.myszy_extra, 0)) > 50;

--Zad13
SELECT
    B.nr_bandy AS "Numer bandy",
    K.plec AS "Plec",
    MIN(K.przydzial_myszy) AS Minimalny_Przydzial_Myszy
FROM
    Bandy B
JOIN
    Kocury K ON B.nr_bandy = K.nr_bandy
GROUP BY
    K.nr_bandy, K.plec;

--Zad14
SELECT
    level AS "Poziom", pseudo, funkcja, nr_bandy
FROM Kocury WHERE plec = 'M'
CONNECT BY PRIOR pseudo=szef
START WITH Funkcja = 'BANDZIOR'
ORDER BY level;

--Zad15
SELECT
     CASE 
     WHEN level = 1 THEN '0' || '    ' || imie
     ELSE RPAD('===>', (level - 1) * 4, '===>') || (level - 1) || '    ' || imie
     END "Hierarchia",
     CASE
     WHEN szef IS NULL THEN 'Sam sobie szefem'
     ELSE szef 
     END "Pseudo szefa", 
     funkcja AS "Funkcja"
FROM Kocury 
WHERE myszy_extra IS NOT NULL
CONNECT BY PRIOR pseudo=szef
START WITH szef IS NULL
ORDER BY level;

--Zad 16
SELECT RPAD('   ', 4 * (LEVEL - 1), '   ') || pseudo AS "Droga sluzbowa"
FROM Kocury
CONNECT BY PRIOR szef = pseudo AND pseudo != 'LYSY'
START WITH 
    months_between('2023-06-29', w_stadku_od)/12 > 14
    AND plec = 'M'
    AND myszy_extra IS NULL
    AND pseudo != 'RAFA';








--LISTA 2

--Zad 17
SELECT K.pseudo
    AS "POLUJE W POLU", 
    K.przydzial_myszy AS "PRZYDZIAL MYSZY", 
    B.nazwa AS "BANDA"
FROM Bandy B, Kocury K
WHERE B.teren IN('POLE', 'CALOSC')
    AND K.przydzial_myszy > 50
    AND K.nr_bandy = B.nr_bandy;
    
--Zad 18
SELECT K1.imie, K1.w_stadku_od AS "POLUJE OD"
FROM Kocury K1, Kocury K2
WHERE K1.w_stadku_od < K2.w_stadku_od
    AND K2.imie = 'JACEK'
ORDER BY K1.w_stadku_od DESC;

--Zad 19
SELECT K1.imie AS "Kot", 
    K1.funkcja AS "Funkcja",
    K2.imie AS "Szef 1", 
    K3.imie AS "Szef 2",
    K4.imie AS "Szef 3"
FROM Kocury K1
LEFT JOIN Kocury K2 ON K1.szef = K2.pseudo
LEFT JOIN Kocury K3 ON K2.szef = K3.pseudo
LEFT JOIN Kocury K4 ON K3.szef = K4.pseudo
WHERE K1.funkcja IN ('KOT', 'MILUSIA');

--b
SELECT *
FROM (SELECT CONNECT_BY_ROOT imie AS "Imie", 
        imie, 
        CONNECT_BY_ROOT funkcja AS "FUNKCJA", 
        LEVEL AS "L"
    FROM KOCURY
    CONNECT BY PRIOR szef = pseudo
    START WITH funkcja IN ('KOT', 'MILUSIA'))
PIVOT (
    MIN(imie) FOR L IN (2 "Szef 1", 3 "Szef 2", 4 "Szef 3")
    );
    
--c
SELECT imie, funkcja, RTRIM(REVERSE(RTRIM(SYS_CONNECT_BY_PATH(REVERSE(imie), '   |   '), imie)), '   |   ') "IMIONA KOLEJNYCH SZEFOW"
FROM Kocury
WHERE funkcja IN ('KOT', 'MILUSIA')
CONNECT BY PRIOR pseudo=szef
START WITH szef IS NULL;

SELECT 
    imie AS "Imie",
    funkcja,
    CONNECT_BY_ROOT funkcja AS "Funkcja",
    REVERSE(SUBSTR(REVERSE(SYS_CONNECT_BY_PATH(imie, ' | ')), 4)) AS "Imiona kolejnych szef w"
FROM KOCURY
WHERE funkcja IN ('KOT', 'MILUSIA')
CONNECT BY PRIOR pseudo = szef
START WITH szef IS NULL;

--Zad 20
SELECT 
    K.imie AS "Imie kotki",
    B.nazwa AS "Nazwa bandy",
    WK.imie_wroga AS "Imie wroga",
    W.stopien_wrogosci AS "Ocena wrogosci",
    WK.data_incydentu AS "Data inc."
FROM Kocury K, Wrogowie_kocurow WK, Bandy B, Wrogowie W
WHERE K.pseudo = WK.pseudo
    AND K.nr_bandy = B.nr_bandy 
    AND W.imie_wroga = WK.imie_wroga
    AND K.plec = 'D'
    AND WK.data_incydentu > '2007-01-01';
    

--Zad 21
SELECT B.nazwa AS "Nazwa bandy", COUNT(DISTINCT WK.pseudo) AS "Koty z wrogami"
FROM Kocury K
LEFT JOIN Bandy B ON K.nr_bandy = B.nr_bandy
LEFT JOIN Wrogowie_kocurow WK ON K.pseudo = WK.pseudo
GROUP BY B.nazwa;


--Zad 22
SELECT 
    K.funkcja AS "Funkcja",
    K.pseudo AS "Pseudonim kota", 
    COUNT(WK.pseudo) AS "Liczba wrog w"
FROM Kocury K
JOIN Wrogowie_kocurow WK ON K.pseudo = WK.pseudo
GROUP BY K.pseudo, K.funkcja
HAVING COUNT(WK.pseudo) > 1;


--Zad 23
SELECT imie AS "IMIE", (przydzial_myszy*12 + myszy_extra*12) AS "DAWKA ROCZNA", 'Powyzej 864' AS "DAWKA"
FROM Kocury
WHERE przydzial_myszy*12 + myszy_extra*12 > 864 AND myszy_extra IS NOT NULL
UNION
SELECT imie AS "IMIE", (przydzial_myszy*12 + myszy_extra*12) AS "DAWKA ROCZNA", '864' AS "DAWKA"
FROM Kocury
WHERE przydzial_myszy*12 + myszy_extra*12 = 864 AND myszy_extra IS NOT NULL
UNION
SELECT imie AS "IMIE", (przydzial_myszy*12 + myszy_extra*12) AS "DAWKA ROCZNA", 'Ponizej 864' AS "DAWKA"
FROM Kocury
WHERE przydzial_myszy*12 + myszy_extra*12 <864 AND myszy_extra IS NOT NULL
ORDER BY "DAWKA ROCZNA" DESC;

--Dlaczego nie tak?
SELECT imie AS "IMIE", (przydzial_myszy*12 + myszy_extra*12) AS "DAWKA ROCZNA", 
CASE
           WHEN (przydzial_myszy*12 + myszy_extra*12) > 864 THEN 'powy ej 864'
           WHEN (przydzial_myszy*12 + myszy_extra*12) = 864 THEN '864'
           ELSE 'poni ej 864'
       END AS "DAWKA"
FROM Kocury
WHERE myszy_extra IS NOT NULL
ORDER BY "DAWKA ROCZNA" DESC;

--Zad 24
SELECT B.nr_bandy AS "NR BANDY", 
    B.nazwa AS "NAZWA",
    B.teren AS "TEREN"
FROM Bandy B
LEFT JOIN Kocury K ON K.nr_bandy = B.nr_bandy  
WHERE K.pseudo IS NULL;

SELECT B.nr_bandy AS "NR BANDY", 
    B.nazwa AS "NAZWA",
    B.teren AS "TEREN"
FROM Bandy B
MINUS
SELECT DISTINCT K.nr_bandy, 
    B.nazwa,
    B.teren
FROM Bandy B
LEFT JOIN Kocury K ON K.nr_bandy = B.nr_bandy;

--Zad 25
SELECT imie, funkcja, przydzial_myszy
FROM Kocury
WHERE przydzial_myszy >= 3 * (SELECT przydzial_myszy
                                FROM  (SELECT przydzial_myszy
                                        FROM Kocury K
                                        LEFT JOIN Bandy B ON K.nr_bandy = B.nr_bandy
                                        WHERE B.teren IN('SAD','CALOSC') AND K.funkcja = 'MILUSIA'
                                        ORDER BY K.przydzial_myszy DESC)
                              WHERE ROWNUM = 1);


--Zad 26
WITH SredniPrzydzialMyszy AS (
    SELECT funkcja, ROUND(AVG(przydzial_myszy + NVL(myszy_extra,0))) 
    AS sredni_przydzial_myszy
    FROM Kocury
    WHERE funkcja != 'SZEFUNIO'
    GROUP BY funkcja
)
SELECT funkcja, sredni_przydzial_myszy AS "Srednio najw. i najm. myszy"
FROM SredniPrzydzialMyszy
WHERE sredni_przydzial_myszy = (SELECT MAX(sredni_przydzial_myszy) FROM SredniPrzydzialMyszy)
   OR sredni_przydzial_myszy = (SELECT MIN(sredni_przydzial_myszy) FROM SredniPrzydzialMyszy);
   

--Zad 27
--a
SELECT pseudo, (przydzial_myszy + NVL(myszy_extra,0)) AS "ZJADA"
FROM Kocury K1
WHERE 6 > (
    SELECT COUNT(DISTINCT (przydzial_myszy + NVL(myszy_extra,0)))
    FROM Kocury K2
    WHERE (K2.przydzial_myszy + NVL(K2.myszy_extra,0))>(K1.przydzial_myszy + NVL(K1.myszy_extra,0))
)
ORDER BY "ZJADA" DESC;

--b
SELECT pseudo, (przydzial_myszy + NVL(myszy_extra,0)) AS "ZJADA"
FROM Kocury K1
WHERE (przydzial_myszy + NVL(myszy_extra,0)) IN (
    SELECT * FROM (
        SELECT DISTINCT (przydzial_myszy + NVL(myszy_extra,0)) AS "ZJADA"
        FROM Kocury K2
        ORDER BY "ZJADA" DESC)
        WHERE ROWNUM <= 6);
        
--c
SELECT K1.pseudo, MAX(K1.przydzial_myszy + NVL(K1.myszy_extra,0)) AS "ZJADA"
FROM Kocury K1
LEFT JOIN Kocury K2 ON (K1.przydzial_myszy + NVL(K1.myszy_extra,0)) <= (K2.przydzial_myszy + NVL(K2.myszy_extra,0))
GROUP BY K1.pseudo, (K1.przydzial_myszy + NVL(K1.myszy_extra,0))
HAVING COUNT(DISTINCT (K2.przydzial_myszy + NVL(K2.myszy_extra,0))) <= 6
ORDER BY "ZJADA" DESC;

--d
SELECT pseudo, "ZJADA"
FROM (SELECT pseudo,
     (przydzial_myszy + NVL(myszy_extra,0)) AS "ZJADA", 
     DENSE_RANK() 
     OVER (ORDER BY przydzial_myszy + NVL(myszy_extra,0) DESC)AS pozycja
      FROM Kocury)
WHERE pozycja <= 6;






--Zad 28
SELECT TO_CHAR(EXTRACT(YEAR FROM w_stadku_od)) AS "ROK", COUNT(*) AS "LICZBA WSTAPIEN"
FROM Kocury
GROUP BY EXTRACT(YEAR FROM w_stadku_od)
HAVING COUNT(*) IN (
    (SELECT * FROM 
    (
        SELECT COUNT(*) AS "LICZBA WSTAPIEN"
        FROM Kocury
        GROUP BY EXTRACT(YEAR FROM w_stadku_od)
        HAVING COUNT(*) > (SELECT AVG(COUNT(*)) 
                            FROM Kocury 
                            GROUP BY EXTRACT(YEAR FROM w_stadku_od)
                            ) 
        )
    
    WHERE ROWNUM = 1),
    (SELECT * FROM 
    (
        SELECT COUNT(*) AS "LICZBA WSTAPIEN"
        FROM Kocury
        GROUP BY EXTRACT(YEAR FROM w_stadku_od)
        HAVING COUNT(*) < (SELECT AVG(COUNT(*)) 
        FROM Kocury GROUP BY EXTRACT(YEAR FROM w_stadku_od)
        )
    )
    WHERE ROWNUM = 1)
    )
    
UNION ALL
SELECT 'Srednia' AS "ROK", ROUND(AVG(COUNT(*)), 7) AS "LICZBA WSTAPIEN"
FROM Kocury
GROUP BY EXTRACT(YEAR FROM w_stadku_od)
ORDER BY "LICZBA WSTAPIEN";


--Zad 29
--a
SELECT
    K1.imie AS "IMIE",
    MIN(K1.przydzial_myszy + NVL(K1.myszy_extra, 0)) AS "ZJADA",
    MIN(K1.nr_bandy) AS "NR BANDY",
    AVG(K2.przydzial_myszy + NVL(K2.myszy_extra, 0)) AS "SREDNIA BANDY"
FROM Kocury K1
JOIN Kocury K2 ON K1.nr_bandy = K2.nr_bandy
WHERE K1.plec = 'M' 
GROUP BY K1.imie
HAVING AVG(K1.przydzial_myszy + NVL(K1.myszy_extra, 0)) <= AVG(K2.przydzial_myszy + NVL(K2.myszy_extra, 0));

--b
SELECT imie, (PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA,0)) AS "ZJADA", NR_BANDY, SREDNIA AS "SREDNIA BANDY"
FROM (SELECT NR_BANDY, AVG(PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA,0)) AS "SREDNIA"
      FROM KOCURY
      GROUP BY NR_BANDY)
JOIN KOCURY USING (NR_BANDY)
WHERE SREDNIA >= (PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA,0)) AND PLEC = 'M'
GROUP BY imie, (PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA,0)), NR_BANDY, SREDNIA;

--c
SELECT imie, (PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA,0)) AS "ZJADA", NR_BANDY,
    (SELECT AVG(PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA,0))
     FROM KOCURY k2
     WHERE k1.NR_BANDY = k2.NR_BANDY)
     AS "SREDNIA BANDY"
FROM KOCURY k1
WHERE PLEC = 'M' AND (PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA,0)) <=
    (SELECT AVG(PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA,0))
     FROM KOCURY K2
     WHERE K1.NR_BANDY = K2.NR_BANDY
     );
     

--Zad 30

SELECT
    K.imie,
    K.w_stadku_od AS "WSTAPIL DO STADKA", 
    '<=== NAJSTARSZY STAZEM W BANDZIE ' || 
    B.nazwa AS " "
FROM Kocury K
JOIN Bandy B ON B.nr_bandy = K.nr_bandy
WHERE K.w_stadku_od = (SELECT MAX(w_stadku_od)
                        FROM Kocury K
                        WHERE B.nr_bandy = K.nr_bandy)
UNION
SELECT
    K.imie,
    K.w_stadku_od AS "WSTAPIL DO STADKA", 
    '<=== NAJMLODSZY STAZEM W BANDZIE ' || 
    B.nazwa AS " "
FROM Kocury K
JOIN Bandy B ON B.nr_bandy = K.nr_bandy
WHERE K.w_stadku_od = (SELECT MIN(w_stadku_od)
                        FROM Kocury K
                        WHERE B.nr_bandy = K.nr_bandy)
UNION
SELECT
    K.imie,
    K.w_stadku_od AS "WSTAPIL DO STADKA", 
    B.nazwa AS " "
FROM Kocury K
JOIN Bandy B ON B.nr_bandy = K.nr_bandy
WHERE K.w_stadku_od NOT IN ((SELECT MIN(w_stadku_od)
                        FROM Kocury K
                        WHERE B.nr_bandy = K.nr_bandy)
                        UNION
                        (SELECT MAX(w_stadku_od)
                        FROM Kocury K
                        WHERE B.nr_bandy = K.nr_bandy));



--Zad 32
SELECT 
    pseudo AS "PSEUDONIM", 
    plec AS PLEC, 
    przydzial_myszy AS "MYSZY PRZED PODW.", 
    nvl(myszy_extra, 0) AS "EXTRA PRZED PODW."
FROM Kocury
WHERE PSEUDO IN ((
    SELECT pseudo 
    FROM (
            SELECT pseudo
            FROM Kocury K
            JOIN Bandy B ON B.nr_bandy = K.nr_bandy
            WHERE B.nazwa = 'CZARNI RYCERZE'
            ORDER BY K.w_stadku_od
        )
    WHERE ROWNUM <= 3
    )
    UNION
    SELECT pseudo 
    FROM (
            SELECT pseudo
            FROM Kocury K
            JOIN Bandy B ON B.nr_bandy = K.nr_bandy
            WHERE B.nazwa = 'LACIACI MYSLIWI'
            ORDER BY K.w_stadku_od
        )
    WHERE ROWNUM <= 3
    );
    
UPDATE KOCURY
SET przydzial_myszy = 
CASE plec
WHEN 'D' 
THEN przydzial_myszy + 
    (SELECT MIN(przydzial_myszy)
    FROM KOCURY) * 0.1
WHEN 'M' 
THEN PRZYDZIAL_MYSZY + 10
END,
MYSZY_EXTRA = 
NVL(MYSZY_EXTRA,0) + (SELECT AVG(NVL(MYSZY_EXTRA,0))
                        FROM KOCURY K
                        WHERE K.NR_BANDY = KOCURY.NR_BANDY) * 0.15;

SELECT 
    pseudo AS "PSEUDONIM", 
    plec AS PLEC, 
    przydzial_myszy AS "MYSZY PO PODW.", 
    nvl(myszy_extra, 0) AS "EXTRA PO PODW."
FROM Kocury
WHERE PSEUDO IN ((
    SELECT pseudo 
    FROM (
            SELECT pseudo
            FROM Kocury K
            JOIN Bandy B ON B.nr_bandy = K.nr_bandy
            WHERE B.nazwa = 'CZARNI RYCERZE'
            ORDER BY K.w_stadku_od
        )
    WHERE ROWNUM <= 3
    )
    UNION
    SELECT pseudo 
    FROM (
            SELECT pseudo
            FROM Kocury K
            JOIN Bandy B ON B.nr_bandy = K.nr_bandy
            WHERE B.nazwa = 'LACIACI MYSLIWI'
            ORDER BY K.w_stadku_od
        )
    WHERE ROWNUM <= 3
    );
ROLLBACK;

--Zad 33
SELECT *
CASE
    WHEN plec = 'Kotka' THEN nazwa
    ELSE ' '
END AS nazwa,
plec, ile, szefunio, bandzior, lowczy, lapacz, kot, milusia, dzielczy, suma
FROM (SELECT nazwa,
         CASE
            WHEN plec = 'D' THEN 'Kotka'
            ELSE 'Kocur'
            END AS plec,
         to_char(count(pseudo)) AS ile,
         to_char(SUM(DECODE(funkcja,'SZEFUNIO', NVL(przydzial_myszy,0)+NVL(MYSZY_EXTRA,0),0))) AS szefunio,
         to_char(SUM(DECODE(funkcja, 'BANDZIOR', NVL(przydzial_myszy,0)+NVL(MYSZY_EXTRA,0),0))) AS bandzior,
         to_char(SUM(DECODE(funkcja, 'LOWCZY', NVL(przydzial_myszy,0)+NVL(MYSZY_EXTRA,0),0))) AS lowczy,
         to_char(SUM(DECODE(funkcja, 'LAPACZ', NVL(przydzial_myszy,0)+NVL(MYSZY_EXTRA,0),0))) AS lapacz,
         to_char(SUM(DECODE(funkcja, 'KOT', NVL(przydzial_myszy,0)+NVL(MYSZY_EXTRA,0),0))) AS kot,
         to_char(SUM(DECODE(funkcja, 'MILUSIA', NVL(przydzial_myszy,0)+NVL(MYSZY_EXTRA,0),0))) AS milusia,
         to_char(SUM(DECODE(funkcja, 'DZIELCZY', NVL(przydzial_myszy,0)+NVL(MYSZY_EXTRA,0),0))) AS dzielczy,
         to_char(SUM(NVL(przydzial_myszy,0)+NVL(MYSZY_EXTRA,0))) AS suma
    FROM Kocury
    JOIN Bandy ON Kocury.nr_bandy = Bandy.nr_bandy
    GROUP BY nazwa, plec
    UNION
    SELECT 'ZJADA RAZEM' AS nazwa, ' ' plec, ' ' ile,
         to_char(SUM(DECODE(funkcja, 'SZEFUNIO', NVL(PRZYDZIAL_MYSZY,0)+NVL(MYSZY_EXTRA,0),0))) szefunio,
         to_char(SUM(DECODE(funkcja, 'BANDZIOR', NVL(PRZYDZIAL_MYSZY,0)+NVL(MYSZY_EXTRA,0),0))) bandzior,
         to_char(SUM(DECODE(funkcja, 'LOWCZY', NVL(PRZYDZIAL_MYSZY,0)+NVL(MYSZY_EXTRA,0),0))) lowczy,
         to_char(SUM(DECODE(funkcja, 'LAPACZ', NVL(PRZYDZIAL_MYSZY,0)+NVL(MYSZY_EXTRA,0),0))) lapacz,
         to_char(SUM(DECODE(funkcja, 'KOT', NVL(PRZYDZIAL_MYSZY,0)+NVL(MYSZY_EXTRA,0),0))) kot,
         to_char(SUM(DECODE(funkcja, 'MILUSIA', NVL(PRZYDZIAL_MYSZY,0)+NVL(MYSZY_EXTRA,0),0))) milusia,
         to_char(SUM(DECODE(funkcja, 'DZIELCZY', NVL(PRZYDZIAL_MYSZY,0)+NVL(MYSZY_EXTRA,0),0))) dzielczy,
         to_char(SUM(NVL(PRZYDZIAL_MYSZY,0)+NVL(MYSZY_EXTRA,0))) suma
    FROM KOCURY JOIN BANDY B on KOCURY.NR_BANDY = B.NR_BANDY
    ORDER BY 1,2 DESC);
    
--B
SELECT *
FROM (
    SELECT nazwa, decode(PLEC, 'D', 'Kotka', 'Kocur') AS "PLEC", funkcja,
           NVL(PRZYDZIAL_MYSZY,0) + NVL(MYSZY_EXTRA,0) przydzial
    FROM KOCURY JOIN BANDY B on KOCURY.NR_BANDY = B.NR_BANDY
     )
PIVOT (
    SUM(przydzial)
    for FUNKCJA
    IN ('SZEFUNIO', 'BANDZIOR', 'LOWCZY', 'LAPACZ', 'KOT', 'MILUSIA', 'DZIELCZY')
    )
UNION ALL
SELECT *
FROM (
    SELECT 'Zjada razem ', ' ', funkcja,
           (NVL(PRZYDZIAL_MYSZY,0) + nvl(MYSZY_EXTRA, 0)) przydzial
    FROM KOCURY JOIN BANDY B on KOCURY.NR_BANDY = B.NR_BANDY
     )
PIVOT (
    SUM(NVL(przydzial, 0))
    for FUNKCJA
    IN ('SZEFUNIO', 'BANDZIOR', 'LOWCZY', 'LAPACZ', 'KOT', 'MILUSIA', 'DZIELCZY')
    );
    
    

---------
--LISTA 3
---------

--Zad 34
SET SERVEROUTPUT ON 

DECLARE
    f1 Funkcje.funkcja%TYPE := '&funkcja';
BEGIN
    DBMS_OUTPUT.PUT('Podaj funkcje kota: ');

    SELECT funkcja INTO f1
    FROM Kocury
    WHERE funkcja = f1 
    AND ROWNUM = 1;

    DBMS_OUTPUT.PUT_LINE('Znaleziono kota o funkcji ' || f1);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono kota o funkcji ' || f1);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wyst pi  b  d: ' || SQLERRM);
END;


--Zad 35
DECLARE
    Koty KOCURY%ROWTYPE;
    czySpelnia BOOLEAN := FALSE;
BEGIN
    SELECT * INTO Koty FROM Kocury WHERE pseudo= '&pseudo';
    IF (Koty.przydzial_myszy + NVL(Koty.myszy_extra,0)) * 12 > 700
    THEN
        czySpelnia := TRUE;
        DBMS_OUTPUT.PUT_LINE('calkowity roczny przydzial myszy > 700');
    END IF;

    IF Koty.imie LIKE '%A%' THEN
        czySpelnia := TRUE;
        DBMS_OUTPUT.PUT_LINE('imie zawiera litere A');
    END IF;

    IF EXTRACT(MONTH FROM Koty.W_STADKU_OD) = 5 THEN
        czySpelnia := TRUE;
        DBMS_OUTPUT.PUT_LINE('maj jest miesiacem przystapienia do stada');
    END IF;

    IF NOT czySpelnia THEN
        DBMS_OUTPUT.PUT_LINE('nie odpowiada kryteriom');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('BRAK TAKIEGO KOTA');
END;

--Zad 36
SET SERVEROUTPUT ON;

DECLARE
    CURSOR Koty IS
        SELECT K.pseudo, K.imie, K.przydzial_myszy, F.max_myszy
        FROM Kocury K LEFT JOIN FUNKCJE F ON K.FUNKCJA = F.FUNKCJA
        ORDER BY przydzial_myszy DESC
    FOR UPDATE OF K.przydzial_myszy;
    przydzial NUMBER(4) := 0;
    ilosc_zmian NUMBER(4) :=0;
BEGIN
    LOOP
        SELECT SUM(przydzial_myszy) INTO przydzial FROM Kocury;
        EXIT WHEN przydzial > 1050;
        FOR kot IN Koty
        LOOP
            IF (kot.przydzial_myszy >= kot.MAX_MYSZY)
                THEN kot.przydzial_myszy := kot.MAX_MYSZY;
            ELSIF(kot.przydzial_myszy * 1.1 > kot.MAX_MYSZY)
                THEN kot.przydzial_myszy := kot.MAX_MYSZY;
                ilosc_zmian := ilosc_zmian + 1;
            ELSE kot.przydzial_myszy := (kot.przydzial_myszy * 1.1);
                ilosc_zmian := ilosc_zmian + 1;
            END IF;
            przydzial := przydzial + kot.przydzial_myszy;
            UPDATE KOCURY k
            SET k.przydzial_myszy = kot.przydzial_myszy
            WHERE k.pseudo = kot.pseudo;
            END LOOP;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Calk. przydzial w stadku ' || przydzial || ' Zmian - ' || ilosc_zmian);

END;

SELECT imie, przydzial_myszy AS "Myszki po podwyzce" FROM KOCURY
ORDER BY przydzial_myszy;
ROLLBACK;


--Zad 37
DECLARE
    CURSOR top_koty IS
        SELECT K.pseudo, (przydzial_myszy + NVL(myszy_extra, 0)) AS zjada
        FROM Kocury K
        ORDER BY zjada DESC;
    licznik NUMBER(2) := 0;
    kot top_koty%ROWTYPE;
BEGIN
    FOR kot IN top_koty
    LOOP
        IF licznik < 5 THEN
            licznik := licznik + 1;
            DBMS_OUTPUT.PUT_LINE(licznik || '. ' || kot.pseudo || ' zjada: ' || kot.zjada);
        ELSE
            EXIT;
        END IF;
    END LOOP;
END;


--Zad 38
--REKURENCYJNIE
SET SERVEROUTPUT ON;
CREATE OR REPLACE
 FUNCTION szefowie_rek(pseudo_kota Kocury.pseudo%TYPE, ilosc_szefow NUMBER)
 RETURN VARCHAR2
 AS
 ps_szefa Kocury.szef%TYPE; im_szefa Kocury.imie%TYPE;
 BEGIN
 SELECT K1.szef,K2.imie INTO ps_szefa,im_szefa
 FROM Kocury K1,Kocury K2
 WHERE K1.szef=k2.pseudo AND K1.pseudo=pseudo_kota;
  IF ps_szefa IS NOT NULL AND ilosc_szefow != 0 THEN
    DBMS_OUTPUT.PUT(RPAD(im_szefa, 10) || '|');
    RETURN szefowie_rek(ps_szefa, ilosc_szefow - 1);
    ELSE
    DBMS_OUTPUT.PUT_LINE('');
    RETURN NULL;
  END IF;

END szefowie_rek;

SET VERIFY OFF
DECLARE
   CURSOR kocury_cursor IS
      SELECT pseudo, imie
      FROM Kocury
      WHERE funkcja IN ('MILUSIA', 'KOT');
      ps_kota Kocury.pseudo%TYPE; 
      im_kota Kocury.imie%TYPE;
      l_iteracji NUMBER;
BEGIN
    l_iteracji := '&l_iteracji';
   FOR k IN kocury_cursor LOOP
    BEGIN
      SELECT imie INTO im_kota
      FROM Kocury
      WHERE pseudo= k.pseudo;
     DBMS_OUTPUT.PUT(RPAD(im_kota,10) || '|');
     ps_kota:=szefowie_rek(k.pseudo, l_iteracji);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('');
  END;
  END LOOP;
END;

--SPOSOB 2

DECLARE
  CURSOR Koty IS 
    SELECT * 
    FROM Kocury 
    WHERE funkcja IN ('KOT', 'MILUSIA');
  kot Koty%ROWTYPE;
  pseudoSzefa Kocury.pseudo%TYPE;
  charLine VARCHAR2(255);
  columnHeading VARCHAR2(255);
  dataLine VARCHAR2(255);
  deep NUMBER := TO_NUMBER('&number');
  i NUMBER := 1;
BEGIN
  OPEN Koty;

  columnHeading := RPAD('Imie', 13);
  FOR k IN 1..deep
  LOOP
    columnHeading := columnHeading || ' | ' || RPAD('SZEF ' || TO_CHAR(k), 13);
  END LOOP;
  DBMS_OUTPUT.PUT_LINE(columnHeading);

  charLine := RPAD('-', 13, '-');
  FOR k IN 1..deep
  LOOP
    charLine := charLine || '-|-' || RPAD('-', 13, '-');
  END LOOP;
  DBMS_OUTPUT.PUT_LINE(charLine);

  LOOP
    FETCH Koty INTO kot;
    EXIT WHEN Koty%NOTFOUND;
    dataLine := RPAD(kot.imie, 13);

    LOOP
      EXIT WHEN i > deep;
      BEGIN
        SELECT * INTO kot 
        FROM Kocury 
        WHERE pseudo = kot.szef;
        dataLine := dataLine || ' | ' || RPAD(kot.imie, 13);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          dataLine := dataLine || ' | ' || RPAD(' ', 13);
      END;
      i := i + 1;
    END LOOP;

    i := 1;
    DBMS_OUTPUT.PUT_LINE(dataLine);
  END LOOP;

  CLOSE Koty;
END;

--Zad 39
SET SERVEROUTPUT ON;
DECLARE
    nrBandy NUMBER(2);
    nazwaBandy Bandy.nazwa%TYPE;
    terenBandy Bandy.teren%TYPE;
    nr_mniejszy_od_zera_exception EXCEPTION;
    banda_juz_istnieje_exception EXCEPTION;
    numer_dostepny BOOLEAN := false;
    nazwa_dostepna BOOLEAN := false;
    teren_dostepny BOOLEAN := false;
    error_code VARCHAR(155);
    liczba_kotow NUMBER(4);
BEGIN
    nrBandy := '&nr_bandy';
    nazwaBandy := '&nazwaBandy';
    terenBandy := '&terenBandy';
    IF nrBandy <=0 THEN raise nr_mniejszy_od_zera_exception;
    END IF;
    SELECT COUNT(*) INTO liczba_kotow FROM Bandy B WHERE nrBandy = B.nr_bandy;
    IF liczba_kotow = 0 THEN numer_dostepny := true;
    END IF;
    SELECT COUNT(*) INTO liczba_kotow FROM Bandy B WHERE nazwaBandy = B.nazwa;
    IF liczba_kotow = 0 THEN nazwa_dostepna := true;
    END IF;
    SELECT COUNT(*) INTO liczba_kotow FROM Bandy B WHERE terenBandy = B.TEREN;
    IF liczba_kotow = 0 THEN teren_dostepny := true;
    END IF;
    IF numer_dostepny AND nazwa_dostepna AND teren_dostepny THEN
        INSERT INTO Bandy(nr_bandy, nazwa, teren)
        VALUES(nrBandy, nazwaBandy, terenBandy);
    ELSE
        raise banda_juz_istnieje_exception;
    END IF;

EXCEPTION
    WHEN nr_mniejszy_od_zera_exception THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: Numer bandy musi byc wiekszy od 0');
    WHEN banda_juz_istnieje_exception THEN
        IF NOT numer_dostepny  THEN
            error_code := TO_CHAR(nrBandy) || ', ';
        END IF;
        IF NOT nazwa_dostepna THEN
            error_code := error_code || nazwaBandy || ', ';
        END IF;
        IF NOT teren_dostepny THEN
            error_code := error_code || terenBandy;
        END IF;
        error_code:= error_code || ': juz istnieje';
        DBMS_OUTPUT.PUT_LINE(error_code);
END;

ROLLBACK;

--Zad 40
CREATE OR REPLACE PROCEDURE dodaj_nowa_bande(
    p_nr_bandy Bandy.nr_bandy%TYPE,
    p_nazwa_bandy Bandy.nazwa%TYPE,
    p_teren_bandy Bandy.teren%TYPE
) AS
    nr_mniejszy_od_zera_exception EXCEPTION;
    banda_juz_istnieje_exception EXCEPTION;
    numer_dostepny BOOLEAN := false;
    nazwa_dostepna BOOLEAN := false;
    teren_dostepny BOOLEAN := false;
    error_code VARCHAR(155);
    liczba_kotow NUMBER(4);
BEGIN
    IF p_nr_bandy <= 0 THEN 
        raise nr_mniejszy_od_zera_exception;
    END IF;
    
    SELECT COUNT(*) INTO liczba_kotow FROM Bandy B WHERE p_nr_bandy = B.nr_bandy;
    IF liczba_kotow = 0 THEN 
        numer_dostepny := true;
    END IF;

    SELECT COUNT(*) INTO liczba_kotow FROM Bandy B WHERE p_nazwa_bandy = B.nazwa;
    IF liczba_kotow = 0 THEN 
        nazwa_dostepna := true;
    END IF;

    SELECT COUNT(*) INTO liczba_kotow FROM Bandy B WHERE p_teren_bandy = B.TEREN;
    IF liczba_kotow = 0 THEN 
        teren_dostepny := true;
    END IF;

    IF numer_dostepny AND nazwa_dostepna AND teren_dostepny THEN
        INSERT INTO Bandy(nr_bandy, nazwa, teren)
        VALUES(p_nr_bandy, p_nazwa_bandy, p_teren_bandy);
    ELSE
        raise banda_juz_istnieje_exception;
    END IF;

EXCEPTION
    WHEN nr_mniejszy_od_zera_exception THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: Numer bandy musi by  wi kszy od 0');
    WHEN banda_juz_istnieje_exception THEN
        IF NOT numer_dostepny THEN
            error_code := TO_CHAR(p_nr_bandy) || ', ';
        END IF;
        IF NOT nazwa_dostepna THEN
            error_code := error_code || p_nazwa_bandy || ', ';
        END IF;
        IF NOT teren_dostepny THEN
            error_code := error_code || p_teren_bandy;
        END IF;
        error_code := error_code || ': ju  istnieje';
        DBMS_OUTPUT.PUT_LINE(error_code);
END;

BEGIN
    dodaj_nowa_bande('&nr_bandy', '&nazwa_bandy', '&teren_bandy');
END;


--Zad 41

CREATE OR REPLACE TRIGGER dopisz_bande
BEFORE INSERT ON Bandy 
FOR EACH ROW
DECLARE 
    numer NUMBER;
BEGIN 
    SELECT MAX(nr_bandy) INTO numer FROM Bandy; 
    :NEW.nr_bandy := numer+1;
END;
    
BEGIN
    dodaj_nowa_bande('&nr_bandy', '&nazwa_bandy', '&teren_bandy');
END;

SELECT * FROM Bandy

ROLLBACK;

--Zad 42
CREATE OR REPLACE PACKAGE wirus AS
    before_in_use BOOLEAN := false;
    after_in_use BOOLEAN := false;
    increased BOOLEAN;
END wirus;

CREATE OR REPLACE TRIGGER before_update
BEFORE UPDATE OF przydzial_myszy ON Kocury
FOR EACH ROW
WHEN (OLD.funkcja = 'MILUSIA')
BEGIN
    IF NOT wirus.after_in_use THEN
        wirus.before_in_use := true;
        
        IF :NEW.przydzial_myszy < :OLD.przydzial_myszy THEN
            :NEW.przydzial_myszy := :OLD.przydzial_myszy;
        ELSIF :NEW.przydzial_myszy < 1.1 * :OLD.przydzial_myszy THEN
            :NEW.myszy_extra := :OLD.myszy_extra + 5;
            :NEW.przydzial_myszy := 1.1 * :OLD.przydzial_myszy;
            wirus.increased := false;
        ELSE
            wirus.increased := true;
        END IF;
    END IF;
END;

CREATE OR REPLACE TRIGGER after_update
AFTER UPDATE OF przydzial_myszy ON Kocury
BEGIN
    IF wirus.before_in_use THEN
        wirus.after_in_use := true;
        wirus.before_in_use := false;
        
        IF NOT wirus.increased THEN
            UPDATE Kocury
            SET przydzial_myszy = 0.9 * przydzial_myszy
            WHERE pseudo = 'TYGRYS';
        ELSE
            UPDATE Kocury
            SET myszy_extra = myszy_extra + 5
            WHERE pseudo = 'TYGRYS';
        END IF;
    END IF;
END;


SELECT * FROM Kocury;

UPDATE kocury
SET przydzial_myszy = 1.01 * przydzial_myszy;

SELECT * FROM Kocury;
ROLLBACK;
